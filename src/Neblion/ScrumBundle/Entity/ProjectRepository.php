<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{
    /**
     * getList
     * 
     * @return type 
     */
    public function getListForUser($account_id)
    {
        return $this->getEntityManager()->createQuery(
                'SELECT p 
                    FROM NeblionScrumBundle:Project p
                    INNER JOIN p.team t
                    INNER JOIN t.members m
                    INNER JOIN m.status s
                    INNER JOIN m.account a
                    WHERE a.id = :account_id
                    AND s.id = 2
                    ORDER BY p.name')
                ->setParameter('account_id', $account_id)
                ->getArrayResult();
    }
    
    public function getMembers($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, r, a, p
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.role r
                    INNER JOIN m.team t
                    INNER JOIN t.project pj
                    INNER JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE pj.id = :project_id
                    ORDER BY p.lastname, p.firstname, a.username'
                )
                ->setParameter('project_id', $project_id)
                ->getArrayResult();
    }
    
    /**
     * getVelocity
     * 
     * Return average velocity of all sprint closed for a project
     * 
     * @param type $project_id
     * @return int 
     */
    public function getVelocity($project_id)
    {
        $result = $this->getEntityManager()
                ->createQuery('SELECT AVG(s.velocity) as velocity 
                    FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.status ss
                    INNER JOIN s.projectRelease pr
                    INNER JOIN pr.project p
                    WHERE p.id = :project_id AND ss.id = 3
                    GROUP BY p.id'
                )
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult(Query::HYDRATE_ARRAY);
        
        if (!is_null($result)) {
            return floor($result['velocity']);
        } 
        
        return 0;
    }
    
    /**
     * getDataBurnUpPoints
     * 
     * Get number of points total/done per release/sprint
     * 
     * @param \Neblion\ScrumBundle\Entity\Project $project
     * @return type 
     */
    public function getDataBurnUpPoints(\Neblion\ScrumBundle\Entity\Project $project)
    {
        // Initialisation
        $response = array();
        $datas = array(0 => array('total' => 0, 'done' => 0));
        $ticks = array(0 => 'R0S0');
        $releaseIndex = $sprintIndex = $index = 1;
        $total = $done = 0;
        
        // Query
        $results = $this->getEntityManager()
                ->createQuery('SELECT p, pr, sp, st, sts
                    FROM NeblionScrumBundle:Project p
                    INNER JOIN p.releases pr
                    INNER JOIN pr.sprints sp
                    INNER JOIN sp.stories st
                    INNER JOIN st.status sts
                    WHERE p.id = :id
                    ORDER BY pr.start, sp.start')
                ->setParameter('id', $project->getId())
                ->getArrayResult();
        
        if (!empty($results)) {
            foreach ($results[0]['releases'] as $release) {
                foreach ($release['sprints'] as $sprint) {
                    // Initialisation
                    $ticks[$index] = 'R' . $releaseIndex . 'S' . $sprintIndex;
                    foreach ($sprint['stories'] as $story) {
                        if ($story['status']['id'] == 3) {
                            $done += $story['estimate'];
                        }
                        $total += $story['estimate'];
                    }
                    $datas[$index]['total'] = $total;
                    $datas[$index]['done']  = $done;
                    $sprintIndex++;
                    $index++;
                }
                $releaseIndex++;
                $sprintIndex = 1;
            }
        }
        
        return $reponse = array(
            'data'  => $datas,
            'ticks' => $ticks
        );
    }
}