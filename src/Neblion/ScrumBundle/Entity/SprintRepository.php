<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SprintRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SprintRepository extends EntityRepository
{
    
    public function load($id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT s, pr, p, ss FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.projectRelease pr
                    INNER JOIN pr.project p
                    INNER JOIN s.status ss 
                    WHERE s.id = :id')
                ->setParameter('id', $id)
                ->getOneOrNullResult();
    }
    
    public function getCurrentForProject($project_id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT s FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.projectRelease pr
                    INNER JOIN pr.project p
                    INNER JOIN s.status ss 
                    WHERE p.id = :project_id AND ss.id = 2')
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult();
    }
    
    public function getList($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT s.id, s.name, s.description, ss.name as status, 
                        s.start, s.end,
                        pr.name as release, count(st.id) as stories, 
                        sum(st.estimate) as estimate
                    FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.status ss
                    INNER JOIN s.projectRelease pr
                    INNER JOIN pr.project p
                    INNER JOIN s.stories st
                    WHERE p.id = :project_id
                    GROUP BY s.id
                    ORDER BY s.created DESC'
                )
                ->setParameter('project_id', $project_id)
                ->getArrayResult();
    }
    
    
    
    /**
     * Look for the next sprint start day
     * 
     * First look if a sprint is in progress, 
     * if true take the end day and look for the next startDay, 
     * if not take the now date and look for the next start day
     * 
     * @param type $project_id
     * @param type $startDay
     * @return \DateTime 
     */
    public function getStartOfNextSprint($project_id, $startDay)
    {
        $date = null;
        $currentSprint = $this->getEntityManager()
                ->createQuery('
                    SELECT s FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.projectRelease pr
                    INNER JOIN pr.project p
                    INNER JOIN s.status ss 
                    WHERE p.id = :project_id AND ss.id = 2')
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult();
        
        if (!is_null($currentSprint)) {
            $date = new \DateTime($currentSprint->getEnd()->format('Y-m-d'));
            $date->modify('+1 day');
        }
         
        if (is_null($date) or $date < \DateTime('now')) {
            $date = new \DateTime('now');
        }
        
        $i = 1;
        while ($i <= 7) {
            if ($date->format('N') == $startDay) {
                return $date;
            }
            $date->modify('+1 day');
            $i++;
        }
        return $date;
    }
    
    public function getForRelease($release_id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT s FROM NeblionScrumBundle:Sprint s
                    INNER JOIN s.projectRelease pr
                    WHERE pr.id = :release_id')
                ->setParameter('release_id', $release_id)
                ->getResult();
    }
}