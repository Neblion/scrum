<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;

/**
 * HourRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HourRepository extends EntityRepository
{
    public function getLastForTask($task_id)
    {
        $result = $this->getEntityManager()
                ->createQuery('SELECT h FROM NeblionScrumBundle:Hour h
                    INNER JOIN h.task t 
                    WHERE t.id = :task_id
                    ORDER BY h.date DESC')
                ->setParameter('task_id', $task_id)
                ->setMaxResults(1)
                //->getResult(Query::HYDRATE_ARRAY);
                ->getResult();
        return $result[0];
    }
    
    public function getForTaskAndDate($task_id, $date)
    {
        return $this->getEntityManager()
                ->createQuery('SELECT h FROM NeblionScrumBundle:Hour h
                    INNER JOIN h.task t 
                    WHERE t.id = :task_id
                    AND h.date = :date')
                ->setParameter('task_id', $task_id)
                ->setParameter('date', $date)
                ->getOneOrNullResult();
    }
    
    public function getBurndownHours($sprint_id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT t.id as task, h.date as date, h.hour as hour
                    FROM NeblionScrumBundle:Hour h
                    INNER JOIN h.task t
                    INNER JOIN t.story s
                    INNER JOIN s.sprint sp
                    WHERE sp.id = :sprint_id
                    ORDER BY t.id, h.date')
                ->setParameter('sprint_id', $sprint_id)
                ->getArrayResult();
    }
    
    public function getEstimateInitialHoursForSprint($sprint_id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT sum(t.hour) as hours
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.story s
                    INNER JOIN s.sprint sp
                    WHERE sp.id = :sprint_id')
                ->setParameter('sprint_id', $sprint_id)
                ->getSingleScalarResult();
    }
}