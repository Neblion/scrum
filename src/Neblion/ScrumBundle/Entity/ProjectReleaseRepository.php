<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;

/**
 * ProjectReleaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectReleaseRepository extends EntityRepository
{
    /**
     * getListForProject
     * 
     * Get list of releases for a project
     * 
     * @param \Neblion\ScrumBundle\Entity\Project $project 
     */
    public function getListForProject(\Neblion\ScrumBundle\Entity\Project $project, $returnQuery = false)
    {
        $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT pr, s FROM NeblionScrumBundle:ProjectRelease pr
                    INNER JOIN pr.status s
                    WHERE pr.project = :project
                    ORDER BY pr.start DESC'
                )
                ->setParameter('project', $project);
        if (!$returnQuery) {
            return $query->getArrayResult();
        }
        
        return $query;
    }
    
    public function getCurrentForProject($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT pr, s FROM NeblionScrumBundle:ProjectRelease pr
                    INNER JOIN pr.status s
                    WHERE pr.project = :project_id
                    AND s.id = 2'
                )
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult();
    }
    
    public function hasReleaseWithNoDueDate($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT pr FROM NeblionScrumBundle:ProjectRelease pr
                    WHERE pr.project = :project_id
                    AND pr.end IS NULL'
                )
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult();
    }
    
    public function hasReleaseBeforeDate($project_id, $date)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT pr FROM NeblionScrumBundle:ProjectRelease pr
                    WHERE pr.project = :project_id
                    AND pr.end > :date
                    ORDER BY pr.end DESC'
                )
                ->setParameter('project_id', $project_id)
                ->setParameter('date', $date)
                ->setMaxResults(1)
                ->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }
    
    public function isCoveringRelease($project_id, $start, $end)
    {
        $dql = 'SELECT pr FROM NeblionScrumBundle:ProjectRelease pr
                    WHERE pr.project = :project_id AND (';
        if (empty($end)) {
            $dql .= ':start <= pr.end)';
        } else {
            $dql .= '(:start <= pr.end AND :end >= pr.start) OR
                    (:start >= pr.start AND :end <= pr.end) OR
                    (:start <= pr.start AND :end >= pr.end)
                    )';
        }
        
        $query = $this->getEntityManager()
                ->createQuery($dql)
                ->setParameter('project_id', $project_id)
                ->setParameter('start', $start);
        if (!empty($end)) {
            $query->setParameter('end', $end);
        }
        return $query->setMaxResults(1)->getOneOrNullResult();
    }
    
    public function getLastEndDate($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT MAX(pr.end) FROM NeblionScrumBundle:ProjectRelease pr
                    WHERE pr.project = :project_id'
                )
                ->setParameter('project_id', $project_id)
                ->getSingleScalarResult();
    }
}