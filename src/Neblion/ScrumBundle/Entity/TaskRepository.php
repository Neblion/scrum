<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{
    public function load($id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT t, ts, s, m, a, pf, sp, sps, pr, p, f, h 
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.status ts
                    INNER JOIN t.story s
                    LEFT JOIN t.member m
                    LEFT JOIN m.account a
                    LEFT JOIN a.profile pf
                    INNER JOIN s.sprint sp
                    INNER JOIN sp.status sps
                    INNER JOIN sp.projectRelease pr
                    INNER JOIN s.project p
                    INNER JOIN s.feature f
                    LEFT JOIN t.hours h 
                    WHERE t.id = :id'
                )
                ->setParameter('id', $id)
                ->getOneOrNullResult();
    }
    
    public function getForSprint($sprint_id)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT t.id, t.hour, ts.id as status
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.status ts
                    INNER JOIN t.story s
                    INNER JOIN s.sprint sp
                    WHERE sp.id = :sprint_id
                    ORDER BY t.id')
                ->setParameter('sprint_id', $sprint_id)
                ->getArrayResult();
    }
    
    public function loadToDo($story_id, $hydrate_mode = Query::HYDRATE_ARRAY)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT t, ts, h, m, a, p
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.status ts
                    INNER JOIN t.story s
                    LEFT JOIN t.hours h
                    LEFT JOIN t.member m
                    LEFT JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE s.id = :story_id
                    AND ts.id = 1
                    ORDER BY t.id, h.date DESC')
                ->setParameter('story_id', $story_id)
                ->getResult($hydrate_mode);
    }
    
    public function loadForStory($story_id, $hydrate_mode = Query::HYDRATE_ARRAY)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT t, ts, h, m, a, p
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.status ts
                    INNER JOIN t.story s
                    LEFT JOIN t.hours h
                    LEFT JOIN t.member m
                    LEFT JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE s.id = :story_id
                    ORDER BY ts.id, t.id, h.date DESC')
                ->setParameter('story_id', $story_id)
                ->getResult($hydrate_mode);
    }
    
    /**
     * getTasksToDoInProgress
     * 
     * @param type $member_id
     * @return array
     */
    public function getToDoInProgressForMember($member_id, $hydrate_mode = Query::HYDRATE_OBJECT)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT t
                    FROM NeblionScrumBundle:Task t
                    INNER JOIN t.status ts
                    INNER JOIN t.member m
                    INNER JOIN t.story s
                    INNER JOIN s.status ss
                    WHERE m.id = :id
                    AND ss.id IN (1, 2) 
                    AND ts.id = 2'
                )
                ->setParameter('id', $member_id)
                ->getResult($hydrate_mode);
    }
}