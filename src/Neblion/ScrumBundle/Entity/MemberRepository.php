<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;


/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository
{
    
    public function getTeamMembers($project, $hydrate_mode = Query::HYDRATE_OBJECT)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, s, r, a, p
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.project pr
                    INNER JOIN m.status s
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE pr.id = :project_id
                    AND s.id = 2
                    ORDER BY p.lastname, p.firstname, a.username'
                )
                ->setParameter('project_id', $project->getId())
                ->getResult($hydrate_mode);
    }
    
    public function getTeamMembersNotEnabled($project, $hydrate_mode = Query::HYDRATE_OBJECT)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, s, r, a, p
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.project pr
                    INNER JOIN m.status s
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE pr.id = :project_id
                    AND s.id != 2
                    ORDER BY p.lastname, p.firstname, a.username'
                )
                ->setParameter('project_id', $project->getId())
                ->getResult($hydrate_mode);
    }
    
    public function isMemberOfProject($account_id, $project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, r, s
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.status s
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    INNER JOIN m.project p
                    WHERE a.id = :account_id
                    AND p.id = :project_id
                    AND s.id = 2'
                )
                ->setParameter('account_id', $account_id)
                ->setParameter('project_id', $project_id)
                ->getOneOrNullResult();
    }
    
    public function load($id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, r, p, a, pf, s, sp
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    INNER JOIN m.project p
                    LEFT JOIN a.profile pf
                    LEFT JOIN m.sender s
                    LEFT JOIN s.profile sp
                    WHERE m.id = :id'
                )
                ->setParameter('id', $id)
                ->getOneOrNullResult();
    }
    
    public function getAdminsForProject($project_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, r, a, pf
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    INNER JOIN m.project p
                    INNER JOIN a.profile pf
                    WHERE p.id = :id'
                )
                ->setParameter('id', $project_id)
                ->getArrayResult();
    }
    
    public function hasPendingInvitation($user)
    {
        $result = $this->getEntityManager()
                ->createQuery(
                    'SELECT m
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.account a
                    INNER JOIN m.status ms
                    WHERE a.id = :id
                    AND ms.id = 1'
                )
                ->setParameter('id', $user->getId())
                ->getOneOrNullResult();
         if ($result) {
             return true;
         }
         
         return false;
    }
    
    public function loadInvitations($user)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT m, ms, r, p, a, pr, s
                    FROM NeblionScrumBundle:Member m
                    INNER JOIN m.status ms
                    INNER JOIN m.role r
                    INNER JOIN m.account a
                    INNER JOIN m.project p
                    INNER JOIN m.sender s
                    INNER JOIN s.profile pr
                    WHERE a.id = :id
                    AND ms.id = 1'
                )
                ->setParameter('id', $user->getId())
                ->getArrayResult();
    }
    
}