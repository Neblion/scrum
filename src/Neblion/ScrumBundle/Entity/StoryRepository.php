<?php

namespace Neblion\ScrumBundle\Entity;

use Doctrine\ORM\Query;
use Doctrine\ORM\EntityRepository;

/**
 * StoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoryRepository extends EntityRepository
{
    
    /**
     *
     * @param type $id
     * @param type $hydrate_mode
     * @return type 
     */
    public function load($id, $hydrate_mode = Query::HYDRATE_ARRAY)
    {
        return $this->getEntityManager()
                ->createQuery('
                    SELECT s, ss, f, pj, sp
                    FROM NeblionScrumBundle:Story s
                    INNER JOIN s.status ss
                    INNER JOIN s.feature f
                    INNER JOIN s.project pj
                    LEFT JOIN s.sprint sp
                    LEFT JOIN s.tasks t
                    LEFT JOIN t.status ts
                    LEFT JOIN t.hours h
                    LEFT JOIN t.member m
                    LEFT JOIN m.account a
                    LEFT JOIN a.profile p
                    WHERE s.id = :id')
                ->setParameter('id', $id)
                ->getOneOrNullResult($hydrate_mode);
    }
    
    /**
     * getBacklog
     * 
     * @param \Neblion\ScrumBundle\Entity\Project $project
     * @return type 
     */
    public function getBacklog(\Neblion\ScrumBundle\Entity\Project $project)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT s, f FROM NeblionScrumBundle:Story s
                    INNER JOIN s.project p
                    LEFT JOIN s.feature f
                    LEFT JOIN s.sprint sp
                    WHERE s.project = :project
                    AND sp.id IS NULL
                    ORDER BY s.position ASC'
                )
                ->setParameter('project', $project)
                ->getArrayResult();
    }
    
    public function getBacklogStories(\Neblion\ScrumBundle\Entity\Project $project, $hydrate_mode = Query::HYDRATE_OBJECT)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT s FROM NeblionScrumBundle:Story s
                    INNER JOIN s.project p
                    LEFT JOIN s.sprint sp
                    WHERE s.project = :project
                    AND sp.id IS NULL ORDER BY s.position'
                )
                ->setParameter('project', $project)
                ->getResult($hydrate_mode);
    }
    
    public function getLastPositionForProject($project_id)
    {
        return $this->getEntityManager()
                ->createQuery('SELECT MAX(s.position) FROM NeblionScrumBundle:Story s
                    INNER JOIN s.project p 
                    WHERE p.id = :project_id')
                ->setParameter('project_id', $project_id)
                ->getSingleScalarResult();
    }
    
    public function getBeforePositionForProject($project_id, $position, $include = true)
    {
        $query = 'SELECT s FROM NeblionScrumBundle:Story s
                    INNER JOIN s.project p
                    LEFT JOIN s.sprint sp
                    WHERE s.project = :project_id
                    AND sp.id IS NULL';
        if ($include) {
            $query .= ' AND s.position <= :position';
        } else {
            $query .= ' AND s.position < :position';
        }
        $query .= ' ORDER BY s.position ASC';
        
        return $this->getEntityManager()
                ->createQuery($query)
                ->setParameter('project_id', $project_id)
                ->setParameter('position', $position)
                ->getResult();
    }
    
    public function getAfterPositionForProject($project_id, $position, $include = true)
    {
        $query = 'SELECT s FROM NeblionScrumBundle:Story s
                    INNER JOIN s.project p
                    LEFT JOIN s.sprint sp
                    WHERE s.project = :project_id
                    AND sp.id IS NULL';
        if ($include) {
            $query .= ' AND s.position >= :position';
        } else {
            $query .= ' AND s.position > :position';
        }
        $query .= ' ORDER BY s.position ASC';
        
        return $this->getEntityManager()
                ->createQuery($query)
                ->setParameter('project_id', $project_id)
                ->setParameter('position', $position)
                ->getResult();
    }
    
    public function getSprintDetails($id, $objects = false)
    {
        $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT s, ss, f, t, m, a, p, ts, h, r
                    FROM NeblionScrumBundle:Story s
                    INNER JOIN s.status ss
                    INNER JOIN s.sprint sp
                    LEFT JOIN s.feature f
                    LEFT JOIN s.tasks t
                    LEFT JOIN t.hours h
                    LEFT JOIN t.member m
                    LEFT JOIN m.account a
                    LEFT JOIN a.profile p
                    LEFT JOIN t.status ts
                    LEFT JOIN s.review r
                    WHERE sp.id = :id
                    ORDER BY s.position ASC, t.id, h.date DESC'
                )
                ->setParameter('id', $id);
        
        if ($objects) {
            return $query->getResult();
        }
        
        return $query->getArrayResult();
    }
    
    public function getVelocityForSprint($sprint_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT SUM(s.estimate) as velocity
                    FROM NeblionScrumBundle:Story s
                    INNER JOIN s.status ss
                    INNER JOIN s.sprint sp
                    WHERE sp.id = :sprint_id
                    AND ss.id = 3'
                )
                ->setParameter('sprint_id', $sprint_id)
                ->getSingleScalarResult();
    }
    
    /**
     * getStoriesForSprint
     * 
     * Return story for a sprint order by position
     * 
     * @param type $sprint_id
     * @return array
     */
    public function getStoriesForSprint($sprint_id, $hydrate_mode = Query::HYDRATE_OBJECT)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT s
                    FROM NeblionScrumBundle:Story s
                    INNER JOIN s.sprint sp
                    WHERE sp.id = :sprint_id
                    ORDER BY s.position'
                )
                ->setParameter('sprint_id', $sprint_id)
                ->getResult($hydrate_mode);
    }
    
    /**
     * getStoriesWithoutTaskForSprint
     * 
     * Return story with no task for a sprint.
     * 
     * @param type $sprint_id
     * @return array
     */
    public function getStoriesWithoutTaskForSprint($sprint_id)
    {
        return $this->getEntityManager()
                ->createQuery(
                    'SELECT s
                    FROM NeblionScrumBundle:Story s
                    INNER JOIN s.sprint sp
                    LEFT JOIN s.tasks t
                    WHERE sp.id = :sprint_id
                    AND t IS NULL'
                )
                ->setParameter('sprint_id', $sprint_id)
                ->getArrayResult();
        
    }
    
    
}